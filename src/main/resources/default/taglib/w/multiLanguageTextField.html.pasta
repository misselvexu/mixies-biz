<i:arg name="span" type="int" default="6"/>
<i:arg name="smallSpan" type="int" default="12" description="Defines the span for mobile devices"/>
<i:arg name="name" type="String" default=""/>
<i:arg name="fieldName" type="String" default="@name"/>
<i:arg name="value" type="sirius.db.mixing.types.MultiLanguageString"/>
<i:arg name="labelKey" type="String" default=""/>
<i:arg name="label" type="String" default="@i18n(labelKey)"/>
<i:arg name="forceLabel" type="boolean" default="false"/>
<i:arg name="helpKey" type="String" default=""/>
<i:arg name="help" type="String" default="@i18n(helpKey)"/>
<i:arg name="required" type="boolean" default="false"/>
<i:arg name="readonly" type="boolean" default="false"/>
<i:arg name="adminOnly" type="boolean" default="false"/>
<i:arg name="autofocus" type="boolean" default="false"/>
<i:arg name="type" type="String" default="text"/>
<i:arg name="id" type="String" default=""/>
<i:arg name="placeholder" type="String" default=""/>
<i:arg name="tabIndex" type="String" default=""/>

<i:pragma name="description" value="Renders a multi language text input field within a Wondergem template"/>

<i:local name="functionName" value="@('openMultiLanguageModal' + 'fieldName')"/>
<i:local name="modalName" value="@('mls-modal-' + fieldName)"/>

<div class="col-xs-@smallSpan col-md-@span form-group @UserContext.get().signalFieldError(fieldName)">
    <i:if test="isFilled(label) || forceLabel">
        <label>
        <span class="@if (required) { input-required } @if (adminOnly) { admin-link }">
            @label
        </span>
        </label>
    </i:if>
    <div class="input-group" id="@('insert-point-' + fieldName)">
        <input @if(isFilled(id)) { id="@id" }
               type="@type"
               value="@value.fetchTextOrFallback()"
               class="form-control input-block-level"
               @if (isFilled(placeholder)) { placeholder="@placeholder" }
               @if (readonly) { readonly } @if (autofocus) { autofocus }
               @if (isFilled(tabIndex)) { tabindex="@tabIndex" }/>

        <span class="input-group-addon"><span class="fa fa-globe" onclick="@(functionName+ '()')"></span></span>
        <div id="@('hidden-inputs-' + fieldName)">
        </div>
    </div>

    <i:if test="isFilled(help)">
        <span class="help-block"><i:raw>@help</i:raw></span>
    </i:if>
    <i:if test="UserContext.get().hasError(fieldName)">
        <span class="error-block help-block">@UserContext.get().getFieldErrorMessage(fieldName)</span>
    </i:if>
</div>

<w:modal name="@modalName" title="@label">
    <w:modalBody>
        <div class="insert-point">

        </div>
        <w:modalFooter cancelKey="NLS.cancel">
            <a class="btn btn-primary ok-btn">@i18n("NLS.ok")</a>
        </w:modalFooter>
    </w:modalBody>
</w:modal>
<script>
    let $modal = $("#___modalName");
    let langObject = JSON.parse(<i:raw>'___value.getAsJSON()'</i:raw>);
    // todo use NLS available languages
    let languages = '@config("nls.languages")'.replace(/[\[\]]/,'').split(',');

    // todo flag emojis cannot be used as flags don't represent languages! we need to find another solution!
    function getFlagEmoji(langCode) {
        if (langCode === 'fallback') {
            // globe icon
            return String.fromCodePoint(127758);
        } else {
            return langCode.toUpperCase().replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + 127397)); // todo: make IE compatible
        }
    }

    function getLanguageName(lang) {
        // todo resolve language codes
        return lang;
    }

    // render modal body
    $(function () {
        let $insert = $modal.find('.insert-point');
        for (lang in langObject) {
            let $inputGroup = $('<div/>', {'data-lang': lang, 'class' : 'input-group'});
            let $inputText = $('<input>', {
                'type': 'text',
                'data-lang': lang,
                'class': 'form-control input-group-text',
                'value': langObject[lang]
            });
            let $pickerAddon = $(document.createElement('span')).addClass('input-group-addon language-flag').text(getLanguageName(lang));
            $pickerAddon.on('click', function (e) {
                //todo picker /input on click, translated language name also?
                alert('todo picker modal for ' + e.target);
            });
            let $removeButtonGroup = $(document.createElement('span')).addClass('input-group-btn');
            let $removeButton = $(document.createElement('a')).addClass('btn btn-danger button-danger-ask guarded-link remove-language').html('<i class="fa fa-trash"></i>');
            $removeButton.on('click', function(e) {
                removeLanguageRow($inputGroup);
            });
            $removeButton.appendTo($removeButtonGroup);
            $inputGroup.append($pickerAddon).append($inputText).append($removeButtonGroup).appendTo($insert);
            $insert.append($(document.createElement('br')));
        }
        $insert.append($(document.createElement('a')).addClass('btn btn-secondary add-language').on('click', function(e){
            addLanguageRow();
        }).text('+'));
        updateHiddenFields();
    });

    // todo implement add row
    function addLanguageRow() {
        // todo picker
        // todo check if there's already a language entry for lang
        let lang = 'fallback';
        let $insert = $modal.find('.insert-point');
        let $inputGroup = $('<div/>', {'data-lang': lang, 'class' : 'input-group'});
        let $inputText = $('<input>', {
            'type': 'text',
            'data-lang': lang,
            'class': 'form-control input-group-text',
            'value': langObject['fallback']
        });
        let $pickerAddon = $(document.createElement('span')).addClass('input-group-addon language-flag').text(getLanguageName(lang));
        $pickerAddon.on('click', function (e) {
            //todo picker /input on click, translated language name also?
            alert('todo picker modal for ' + e.target);
        });
        let $removeButtonGroup = $(document.createElement('span')).addClass('input-group-btn');
        let $removeButton = $(document.createElement('a')).addClass('btn btn-danger button-danger-ask guarded-link remove-language').html('<i class="fa fa-trash"></i>');
        $removeButton.on('click', function(e) {
            removeLanguageRow($inputGroup);
        });
        $removeButton.appendTo($removeButtonGroup);
        let row = $inputGroup.append($pickerAddon).append($inputText).append($removeButtonGroup).insertBefore($('.add-language'));
        $(document.createElement('br')).insertBefore($('.add-language'));
    }

    function removeLanguageRow(row) {
        let inputGroup = $(row);
        let spacer = inputGroup.next('br');
        inputGroup.remove();
        spacer.remove();
        updateHiddenFields();
    }

    function updateHiddenFields() {
        let $hiddenInputs = $('#hidden-inputs-___fieldName');
        $hiddenInputs.empty();
        $modal.find('input[data-lang]').each(function () {
            $hiddenInputs.append($(document.createElement('input')).attr('type', 'hidden').attr('name', '___fieldName-'+$(this).data('lang')).text($(this).val()));
        });
    }

    // add/remove and fill hidden fields
    $modal.find('.ok-btn').on('click', function (e) {
        $modal.modal('hide');
        updateHiddenFields();
        // todo also update main field
        $('#___fieldName').val(langObject['fallback']);
    });

    function ___functionName () {
        $modal.modal({backdrop: 'static', keyboard: false}).show();
    }
</script>
