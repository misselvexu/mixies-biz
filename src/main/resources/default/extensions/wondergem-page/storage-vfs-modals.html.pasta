<i:arg type="String" name="point"/>

<i:switch test="@point">
    <i:block name="footer">
        <style>
        </style>

        <w:modal name="select-file-modal" titleKey="VFSController.selectFile">
            <w:modalBody>
                <div class="row">
                    <div class="col-md-12">
                        <ol class="breadcrumb breadcrumb-js">
                        </ol>
                    </div>
                </div>
                <div class="row upload-container-js">
                    <div class="col-md-12">
                        <div class="upload-box-js"></div>
                    </div>
                </div>
                <form class="row search-form-js">
                    <div class="col-md-12 form-group">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="@i18n('NLS.search')">
                            <span class="input-group-addon search-btn-js"><i class="fa fa-search"></i></span>
                        </div>
                    </div>
                </form>
                <div class="row">
                    <label class="search-result-js col-md-12" hidden>@i18n("NLS.searchResult")</label>
                    <div class="col-md-12">
                        <table class="table table-striped select-file-table">
                            <tbody class="select-file-table-js">
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="row">
                    <nav aria-label="Pop-up pagination"
                         class="text-center pagination-controls pagination-controls-js col-md-12"></nav>
                </div>
            </w:modalBody>
            <w:modalFooter cancelKey="NLS.cancel">
                <button type="submit" class="btn btn-primary ok-btn-js">@i18n("NLS.ok")</button>
            </w:modalFooter>
        </w:modal>

        <script type="text/javascript">
            function selectVFSDirectory(path) {
                document.querySelector("#select-file-modal .modal-title").textContent = "___i18n('VFSController.selectDirectory')";
                return selectFileOrDirectoryModal({
                    path: path,
                    onlyDirectories: true,
                    pathRestriction: undefined,
                    allowUpload: false,
                    filter: function (child) {
                        return true;
                    },
                    createRow: function (child, pagination, modal, resolve) {
                        const _self = this;

                        const tr = document.createElement("tr");
                        tr.innerHTML = "<td><a class='file-link' href='#' data-path='" + child.path + "'>" +
                            "<i class='fa fa-folder-open'></i>&nbsp;" + child.name + "</a></td>";
                        tr.querySelector(".file-link").addEventListener("click", function () {
                            _self.path = this.dataset.path;
                            pagination.reset();
                        });
                        return tr;
                    }
                });
            }

            function selectVFSFile(path, pathRestriction) {
                document.querySelector("#select-file-modal .modal-title").textContent = "___i18n('VFSController.selectFile')";
                return selectFileOrDirectoryModal({
                    path: path,
                    onlyDirectories: false,
                    pathRestriction: pathRestriction,
                    allowUpload: true,
                    filter: function (child) {
                        return pathRestriction === undefined || child.path.startsWith(pathRestriction);
                    },
                    createRow: function (child, pagination, modal, resolve) {
                        const _self = this;

                        const tr = document.createElement("tr");
                        tr.innerHTML = '<td><a class="file-link" href="#" data-dir="' + child.directory +
                            '" data-path="' + child.path + '">' +
                            '<i class="fa ' + (child.directory ? "fa-folder-open" : "fa-file") + '"></i>&nbsp;' + child.name + '</a></td>' +
                            '<td class="align-right">' + child.sizeString + '</td>' +
                            '<td class="align-right">' + child.lastModifiedString + '</td>';

                        tr.querySelector(".file-link").addEventListener("click", function () {
                            if (this.dataset.dir === "true") {
                                _self.path = this.dataset.path;
                                pagination.reset();
                            } else {
                                $(modal).modal("hide");
                                resolve(this.dataset.path);
                            }
                        });
                        return tr;
                    }
                });
            }

            function selectFileOrDirectoryModal(config) {
                return new Promise(function (resolve, reject) {
                    const modal = document.getElementById("select-file-modal");
                    const table = modal.querySelector('.select-file-table-js');
                    const searchForm = modal.querySelector('.search-form-js input');
                    const pageSize = 5;

                    searchForm.value = "";

                    const pagination = new Pagination(modal.querySelector(".pagination-controls-js"), pageSize, function (page, pagination) {
                        if (page <= 0) {
                            pagination.previousBtn.classList.add("disabled");
                        } else {
                            pagination.previousBtn.classList.remove("disabled");
                        }
                        let url = '/fs/list?';
                        url += "path=" + encodeURIComponent(config.path);
                        url += "&onlyDirectories=" + config.onlyDirectories;
                        url += "&skip=" + (page * pageSize);
                        url += "&maxItems=" + (pageSize + 1);
                        url += "&filter=" + encodeURIComponent(searchForm.value);
                        fetch(url).then(function (response) {
                            if (!response.ok) {
                                throw "Http response status was " + response.status;
                            }
                            return response.json();
                        }).then(function (json) {
                            table.textContent = "";
                            let numItems = Math.min(json.children.length, pageSize);
                            for (let i = 0; i < numItems; i++) {
                                let child = json.children[i];
                                if (config.filter(child)) {
                                    table.appendChild(config.createRow(child, pagination, modal, resolve));
                                }
                            }
                            pagination.setPageLabel((page * pageSize + 1) + " - " + (page * pageSize + numItems));

                            modal.querySelector(".search-result-js").style.display = searchForm.value ? "block" : "none";

                            if (json.children.length <= pageSize) {
                                pagination.nextBtn.classList.add("disabled");
                            } else {
                                pagination.nextBtn.classList.remove("disabled");
                            }

                            const breadcrumbs = modal.querySelector('.breadcrumb-js');
                            breadcrumbs.textContent = '';
                            for (let i = 0; i < json.path.length; i++) {
                                const element = json.path[i];
                                if (!config.filter(element)) {
                                    continue;
                                }
                                const label = element.name === '/' ? '<i class="fa fa-home"></i>' : element.name;
                                const li = document.createElement("li");
                                li.innerHTML = '<a class="file-link" href="#" data-path="' + element.path + '">' + label + '</a>';
                                li.querySelector('.file-link').addEventListener("click", function () {
                                    config.path = this.dataset.path = 'path';
                                    pagination.reset();
                                });
                                breadcrumbs.appendChild(li);
                            }

                            if (config.allowUpload && json.canCreateChildren) {
                                const uploadBox = modal.querySelector('.upload-box-js');
                                fileUpload('/fs/upload?path=' + encodeURIComponent(config.path),
                                    uploadBox, undefined, [], 3, function (response) {
                                        $(modal).modal('hide');
                                        if (response.error) {
                                            clearMessages();
                                            addError(response.message);
                                        } else {
                                            resolve(response.file);
                                        }
                                    });
                            } else {
                                modal.querySelector('.upload-box-js').textContent = '';
                            }
                        });

                    });

                    replaceEventHandlers(modal.querySelector('.search-form-js .search-btn-js'), "click", function () {
                        modal.querySelector('.search-form-js').submit();
                    });
                    replaceEventHandlers(modal.querySelector('.search-form-js'), 'submit', function (event) {
                        event.preventDefault();
                        pagination.reset();
                    });
                    replaceEventHandlers(modal.querySelector('.ok-btn-js'), 'click', function () {
                        $(modal).modal('hide');
                        resolve(config.path);
                    });

                    modal.querySelector(".ok-btn-js").style.display = config.onlyDirectories ? "inline-block" : "none";

                    $(modal).modal('show');
                });
            }

            function replaceEventHandlers(elem, eventName, handler) {
                const clonedElem = elem.cloneNode(false);
                while (elem.hasChildNodes()) {
                    clonedElem.appendChild(elem.firstChild);
                }
                elem.parentNode.replaceChild(clonedElem, elem);
                clonedElem.addEventListener(eventName, handler);
                return clonedElem;
            }
        </script>
    </i:block>
</i:switch>
